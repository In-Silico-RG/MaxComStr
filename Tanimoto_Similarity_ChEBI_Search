import pandas as pd
from rdkit import Chem
from rdkit.Chem import rdFingerprintGenerator, DataStructs
from multiprocessing import Pool, cpu_count

# USER INPUTS
#base_smiles = "C\\1[C@H](NC(=C/C1=C/C=O)C(=O)O)C(=O)O"  # Example: Aspirin
base_smiles = "O=C/C=C1/C=C(C(=O)O)N[C@H](C(=O)O)C1"
similarity_threshold = 0.7
chebi_file = "/home/aldo/sims/chebi_chemreps.txt"
output_csv = "/home/aldo/sims/chebi_similar_results.csv"

# Prepare base molecule and fingerprint
base_mol = Chem.MolFromSmiles(base_smiles)
if base_mol is None:
    raise ValueError("Invalid base SMILES!")
morgan_gen = rdFingerprintGenerator.GetMorganGenerator(radius=2, fpSize=2048)
base_fp = morgan_gen.GetFingerprint(base_mol)

def process_line(line):
    cols = line.strip().split("\t")
    try:
        chebi_id = cols[idx_chebi]
        smiles = cols[idx_smiles]
        mol = Chem.MolFromSmiles(smiles)
        if mol is None:
            return None
        fp = morgan_gen.GetFingerprint(mol)
        sim = DataStructs.TanimotoSimilarity(base_fp, fp)
        if sim >= similarity_threshold:
            return {
                "chebi_id": chebi_id,
                "smiles": smiles,
                "similarity": sim
            }
    except Exception:
        return None

# Read header and index positions
with open(chebi_file, "rt") as f:
    header = f.readline().strip().split("\t")
idx_chebi = header.index("chebi_id")
idx_smiles = header.index("canonical_smiles")  # Or change to the correct column name if different

# Read file lines (excluding header)
with open(chebi_file, "rt") as f:
    next(f)  # skip header
    lines = list(f)

# Parallel processing
with Pool(processes=cpu_count()) as pool:
    results = list(pool.map(process_line, lines))

# Filter out None results
results = [r for r in results if r is not None]

# Save results to CSV
df = pd.DataFrame(results)
df.sort_values("similarity", ascending=False, inplace=True)
df.to_csv(output_csv, index=False)

print(f"Found {len(df)} compounds with similarity >= {similarity_threshold}. Results saved to {output_csv}.")
