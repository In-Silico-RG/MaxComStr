# Tanimoto Similarity Search Across KEGG, PubChem, and ChEBI
# Compatible with Jupyter and CLI

import os
import time
import csv
import logging
import requests
import pandas as pd
import numpy as np
from tqdm import tqdm
from rdkit import Chem
from rdkit.Chem import AllChem, Draw
from rdkit import DataStructs
from PIL import Image
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.cluster.hierarchy import linkage, dendrogram

# ----------------------- Configuration -----------------------
SMILES_BASE = 'OC(=O)[C@@H]1CC(=C/C=O)C=C(N1)C(=O)O'
SIMILARITY_THRESHOLD = 0.8
FINGERPRINT_RADIUS = 2
FINGERPRINT_NBITS = 2048
OUTPUT_CSV = 'similar_compounds_all_sources.csv'
MOLECULE_IMAGE = 'top_molecules_grid.png'
HEATMAP_IMAGE = 'similarity_heatmap.png'

headers = {'User-Agent': 'Mozilla/5.0'}
fingerprint_cache = {}
logging.basicConfig(level=logging.INFO)

# ----------------------- Utilities --------------------------
def get_fingerprint(smiles, radius=2, nbits=2048):
    if smiles in fingerprint_cache:
        return fingerprint_cache[smiles]
    mol = Chem.MolFromSmiles(smiles)
    if mol:
        fp = AllChem.GetMorganFingerprintAsBitVect(mol, radius=radius, nBits=nbits)
        fingerprint_cache[smiles] = fp
        return fp
    return None

def compute_tanimoto(smiles1, smiles2):
    fp1 = get_fingerprint(smiles1)
    fp2 = get_fingerprint(smiles2)
    if fp1 and fp2:
        return DataStructs.TanimotoSimilarity(fp1, fp2)
    return 0.0

# ------------------ PubChem Search --------------------------
def pubchem_similar(smiles, threshold=90):
    url = 'https://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/similarity/smiles/JSON'
    params = {
        'smiles': smiles,
        'Threshold': threshold,
        'MaxRecords': 100
    }
    try:
        r = requests.get(url, params=params)
        r.raise_for_status()
        cids = r.json()['IdentifierList']['CID']
        return cids
    except Exception as e:
        logging.warning(f"PubChem error: {e}")
        return []

def pubchem_properties(cids):
    if not cids:
        return []
    url = f'https://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/cid/" + ",".join(map(str, cids)) + "/property/CanonicalSMILES,MolecularFormula/JSON'
    try:
        r = requests.get(url)
        r.raise_for_status()
        return r.json()['PropertyTable']['Properties']
    except Exception as e:
        logging.warning(f"PubChem property fetch failed: {e}")
        return []

# ------------------ KEGG Search -----------------------------
def get_smiles_from_kegg(kegg_id):
    url = f'https://rest.kegg.jp/get/{kegg_id}/mol'
    try:
        r = requests.get(url, timeout=10)
        r.raise_for_status()
        mol = Chem.MolFromMolBlock(r.text)
        if mol:
            return Chem.MolToSmiles(mol)
    except Exception as e:
        logging.warning(f"KEGG {kegg_id} error: {e}")
    return None

def fetch_kegg_compounds():
    url = 'https://rest.kegg.jp/list/compound'
    try:
        r = requests.get(url)
        r.raise_for_status()
        return [line.split('\t')[0].split(':')[1] for line in r.text.strip().split('\n')]
    except Exception as e:
        logging.warning(f"KEGG list fetch error: {e}")
        return []

# ------------------ ChEBI Search ----------------------------
def chebi_similar(smiles):
    # Fallback: static ChEBI TSV or custom list
    return []  # To be implemented with RDF or TSV search

# ------------------ Main Collection -------------------------
all_results = []

# PubChem
cids = pubchem_similar(SMILES_BASE, threshold=int(SIMILARITY_THRESHOLD * 100))
for prop in pubchem_properties(cids):
    sim = compute_tanimoto(SMILES_BASE, prop['CanonicalSMILES'])
    if sim >= SIMILARITY_THRESHOLD:
        all_results.append(("PubChem", str(prop.get("CID", "")), prop["CanonicalSMILES"], prop["MolecularFormula"], sim))

# KEGG
for kid in tqdm(fetch_kegg_compounds()[:500]):
    smiles = get_smiles_from_kegg(kid)
    if smiles:
        sim = compute_tanimoto(SMILES_BASE, smiles)
        if sim >= SIMILARITY_THRESHOLD:
            all_results.append(("KEGG", kid, smiles, "", sim))

# ChEBI (to be filled later)
# ...

# ------------------ Output ----------------------------------
df = pd.DataFrame(all_results, columns=["Source", "ID", "SMILES", "MolFormula", "Tanimoto"])
df.sort_values("Tanimoto", ascending=False, inplace=True)
df.to_csv(OUTPUT_CSV, index=False)

# ------------------ Image Grid ------------------------------
top_mols = [Chem.MolFromSmiles(smi) for smi in df.SMILES.head(6)]
top_labels = [f"{row.ID} ({row.Tanimoto:.2f})" for _, row in df.head(6).iterrows()]
img = Draw.MolsToGridImage(top_mols, molsPerRow=3, subImgSize=(250, 250), legends=top_labels)
img.save(MOLECULE_IMAGE)

# ------------------ Heatmap & Clustering --------------------
fps = [get_fingerprint(smi) for smi in df.SMILES.head(30)]
sim_matrix = np.array([[DataStructs.TanimotoSimilarity(fp1, fp2) for fp2 in fps] for fp1 in fps])

plt.figure(figsize=(10, 8))
sns.heatmap(sim_matrix, xticklabels=df.ID.head(30), yticklabels=df.ID.head(30), cmap='coolwarm', square=True)
plt.title("Tanimoto Similarity Heatmap")
plt.tight_layout()
plt.savefig(HEATMAP_IMAGE)
plt.close()

link = linkage(1 - sim_matrix, method='average')
dendrogram(link, labels=df.ID.head(30).tolist(), leaf_rotation=90)
plt.title("Hierarchical Clustering of Top Hits")
plt.tight_layout()
plt.savefig("cluster_dendrogram.png")

print(f"Done. Results saved to {OUTPUT_CSV}, image saved to {MOLECULE_IMAGE}, heatmap and dendrogram generated.")
