# Tanimoto Similarity Search Across KEGG, PubChem, and ChEBI
# Compatible with Jupyter and CLI
# !pip install requests pandas numpy tqdm rdkit matplotlib seaborn scipy

import os
import time
import csv
import logging
import requests
import pandas as pd
import numpy as np
import functools
import random
from tqdm import tqdm
from rdkit import Chem
from rdkit.Chem import AllChem, Draw
from rdkit import DataStructs
from PIL import Image
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.cluster.hierarchy import linkage, dendrogram

# ----------------------- Configuration -----------------------
SMILES_BASE = 'OC(=O)[C@@H]1CC(=C/C=O)C=C(N1)C(=O)O'
SIMILARITY_THRESHOLD = 0.8
FINGERPRINT_RADIUS = 2
FINGERPRINT_NBITS = 2048
OUTPUT_CSV = 'similar_compounds_all_sources.csv'
MOLECULE_IMAGE = 'top_molecules_grid.png'
HEATMAP_IMAGE = 'similarity_heatmap.png'

headers = {'User-Agent': 'Mozilla/5.0'}
fingerprint_cache = {}
logging.basicConfig(level=logging.INFO)

# ----------------------- Utilities --------------------------
def get_fingerprint(smiles, radius=2, nbits=2048):
    if smiles in fingerprint_cache:
        return fingerprint_cache[smiles]
    mol = Chem.MolFromSmiles(smiles)
    if mol:
        fp = AllChem.GetMorganFingerprintAsBitVect(mol, radius=radius, nBits=nbits)
        fingerprint_cache[smiles] = fp
        return fp
    return None

def compute_tanimoto(smiles1, smiles2):
    fp1 = get_fingerprint(smiles1)
    fp2 = get_fingerprint(smiles2)
    if fp1 and fp2:
        return DataStructs.TanimotoSimilarity(fp1, fp2)
    return 0.0

def retry(exception_to_check, tries=3, delay=1.0, backoff=2.0):
    def deco_retry(f):
        @functools.wraps(f)
        def f_retry(*args, **kwargs):
            mtries, mdelay = tries, delay
            while mtries > 1:
                try:
                    return f(*args, **kwargs)
                except exception_to_check as e:
                    logging.warning(f"{f.__name__}: {e}, Retrying in {mdelay}s...")
                    time.sleep(mdelay + random.uniform(0, 0.5))
                    mtries -= 1
                    mdelay *= backoff
            return f(*args, **kwargs)
        return f_retry
    return deco_retry

# ------------------ PubChem Search --------------------------
@retry(Exception, tries=3)
def pubchem_similar(smiles, threshold=90, retries=3, delay=1):
    url = 'https://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/similarity/smiles/JSON'
    params = {
        'smiles': smiles,
        'Threshold': threshold,
        'MaxRecords': 100
    }
    for attempt in range(retries):
        try:
            r = requests.get(url, params=params, timeout=10)
            if r.status_code == 200:
                try:
                    json_data = r.json()
                    return json_data.get('IdentifierList', {}).get('CID', [])
                except Exception as parse_err:
                    logging.warning(f"PubChem response not JSON: {parse_err}")
            else:
                logging.warning(f"PubChem bad response code: {r.status_code}")
        except Exception as e:
            logging.warning(f"PubChem error (attempt {attempt+1}): {e}")
        time.sleep(delay)
    return []

@retry(Exception, tries=3)
def pubchem_properties(cids):
    if not cids:
        return []
    cid_list = ",".join(map(str, cids))
    url = f'https://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/cid/{cid_list}/property/CanonicalSMILES,MolecularFormula/JSON'
    try:
        r = requests.get(url)
        r.raise_for_status()
        return r.json()['PropertyTable']['Properties']
    except Exception as e:
        logging.warning(f"PubChem property fetch failed: {e}")
        return []

# ------------------ KEGG Search -----------------------------
@retry(Exception, tries=3)
def get_smiles_from_kegg(kegg_id):
    url = f'https://rest.kegg.jp/get/{kegg_id}/mol'
    try:
        r = requests.get(url, timeout=10)
        r.raise_for_status()
        mol = Chem.MolFromMolBlock(r.text)
        if mol:
            return Chem.MolToSmiles(mol)
    except Exception as e:
        logging.warning(f"KEGG {kegg_id} error: {e}")
    return None

@retry(Exception, tries=3)
def fetch_kegg_compounds():
    url = 'https://rest.kegg.jp/list/compound'
    try:
        r = requests.get(url)
        r.raise_for_status()
        compounds = []
        for line in r.text.strip().split('\n'):
            parts = line.strip().split('\t')
            if parts and ':' in parts[0]:
                compounds.append(parts[0].split(':')[1])
        return compounds
    except Exception as e:
        logging.warning(f"KEGG list fetch error: {e}")
        return []

def load_kegg_smiles_cache():
    if os.path.exists(KEGG_CACHE_FILE):
        return pd.read_csv(KEGG_CACHE_FILE).set_index("KEGG_ID")["SMILES"].to_dict()
    return {}

def save_kegg_smiles_cache(cache):
    df = pd.DataFrame(list(cache.items()), columns=["KEGG_ID", "SMILES"])
    df.to_csv(KEGG_CACHE_FILE, index=False)

# ------------------ ChEBI Search ----------------------------
def chebi_similar(smiles):
    # Dummy ChEBI entries for demonstration purposes.
    # Replace with real search logic or file/database query as needed.
    dummy_chebi = [
        {"ID": "CHEBI:12345", "SMILES": "OC(=O)C1=CC=CC=C1", "MolFormula": "C7H6O2"},
        {"ID": "CHEBI:67890", "SMILES": "C1=CC=C(C=C1)C(=O)O", "MolFormula": "C7H6O2"}
    ]
    results = []
    for entry in dummy_chebi:
        sim = compute_tanimoto(smiles, entry["SMILES"])
        if sim >= SIMILARITY_THRESHOLD:
            results.append(("ChEBI", entry["ID"], entry["SMILES"], entry["MolFormula"], sim))
    return results

# ------------------ Main Collection -------------------------
all_results = []

# PubChem
cids = pubchem_similar(SMILES_BASE, threshold=int(SIMILARITY_THRESHOLD * 100))
for prop in pubchem_properties(cids):
    sim = compute_tanimoto(SMILES_BASE, prop['CanonicalSMILES'])
    if sim >= SIMILARITY_THRESHOLD:
        all_results.append(("PubChem", str(prop.get("CID", "")), prop["CanonicalSMILES"], prop["MolecularFormula"], sim))

# KEGG
kegg_cache = load_kegg_smiles_cache()
kegg_ids = fetch_kegg_compounds()[:500]
new_kegg = [kid for kid in kegg_ids if kid not in kegg_cache]
for kid in tqdm(new_kegg, desc="Fetching new KEGG SMILES"):
    smiles = get_smiles_from_kegg(kid)
    if smiles:
        kegg_cache[kid] = smiles
save_kegg_smiles_cache(kegg_cache)

for kid in tqdm(kegg_ids, desc="Computing KEGG similarity"):
    smiles = kegg_cache.get(kid)
    if smiles:
        sim = compute_tanimoto(SMILES_BASE, smiles)
        if sim >= SIMILARITY_THRESHOLD:
            all_results.append(("KEGG", kid, smiles, "", sim))

# ChEBI (dummy)
all_results.extend(chebi_similar(SMILES_BASE))

# ------------------ Output ----------------------------------
df = pd.DataFrame(all_results, columns=["Source", "ID", "SMILES", "MolFormula", "Tanimoto"])
df.sort_values("Tanimoto", ascending=False, inplace=True)
df.to_csv(OUTPUT_CSV, index=False)

# ------------------ Image Grid ------------------------------
top_data = [(Chem.MolFromSmiles(row.SMILES), f"{row.ID} ({row.Tanimoto:.2f})")
            for _, row in df.head(6).iterrows()]
top_data = [(mol, label) for mol, label in top_data if mol is not None]

if top_data:
    mols, legends = zip(*top_data)
    img = Draw.MolsToGridImage(mols, molsPerRow=3, subImgSize=(250, 250), legends=legends)
    img.save(MOLECULE_IMAGE)
else:
    logging.warning("⚠️ No valid molecules to display in image grid.")

# ------------------ Heatmap & Clustering --------------------
fps = [get_fingerprint(smi) for smi in df.SMILES.head(30)]
sim_matrix = np.array([[DataStructs.TanimotoSimilarity(fp1, fp2) for fp2 in fps] for fp1 in fps])

plt.figure(figsize=(10, 8))
sns.heatmap(sim_matrix, xticklabels=df.ID.head(30), yticklabels=df.ID.head(30), cmap='coolwarm', square=True)
plt.title("Tanimoto Similarity Heatmap")
plt.tight_layout()
plt.savefig(HEATMAP_IMAGE)
plt.close()

link = linkage(1 - sim_matrix, method='average')
dendrogram(link, labels=df.ID.head(30).tolist(), leaf_rotation=90)
plt.title("Hierarchical Clustering of Top Hits")
plt.tight_layout()
plt.savefig("cluster_dendrogram.png")

print(f"Done. Results saved to {OUTPUT_CSV}, image saved to {MOLECULE_IMAGE}, heatmap and dendrogram generated.")
