# !pip install rdkit pandas IPython
from rdkit import Chem
from rdkit.Chem import rdFingerprintGenerator, DataStructs
import csv
from rdkit import RDLogger
from IPython.display import SVG, display

RDLogger.DisableLog('rdApp.*')

# === USER PARAMETERS ===
#betalains
# base_smiles = "O=C/C=C1/C=C(C(=O)O)N[C@H](C(=O)O)C1"  # Query SMILES
#Luteina
# base_smiles = "CC1=C[C@H](O)CC(C)(C)[C@H]1/C=C/C(C)=C/C=C/C(C)=C/C=C/C=C(C)/C=C/C=C(C)/C=C/C1=C(C)C[C@@H](O)CC1(C)C"
#Kaempferol
base_smiles = "O=c1c(O)c(-c2ccc(O)cc2)oc2cc(O)cc(O)c12"

similarity_threshold = 0.5                      # Tanimoto similarity threshold
sdf_file = "/home/aldo/sims/ChEBI_lite.sdf"            # Input SDF file
output_csv = "/home/aldo/sims/chebi_sim_Kaempferol.csv"  # Output CSV file

# === END USER PARAMETERS ===

# Prepare base molecule and fingerprint
base_mol = Chem.MolFromSmiles(base_smiles)
if base_mol is None:
    raise ValueError("Invalid base SMILES!")
morgan_gen = rdFingerprintGenerator.GetMorganGenerator(
    radius=3,
    useBondTypes=True,
    fpSize=2048,
)
base_fp = morgan_gen.GetFingerprint(base_mol)

supplier = Chem.SDMolSupplier(sdf_file)

with open(output_csv, "w", newline="") as csvfile:
    writer = csv.DictWriter(csvfile, fieldnames=["chebi_id", "smiles", "similarity"])
    writer.writeheader()
    count = 0
    print_count = 0  # Counter for examples printed

    for i, mol in enumerate(supplier):
        if mol is None:
            continue
        try:
            # Print all properties for the first 5 valid molecules (for debug)
 #           if print_count < 5:
 #               print(f"All properties for example {print_count+1}: {mol.GetPropsAsDict()}")
 #               print_count += 1

            # Use the correct property for ChEBI ID
            chebi_id = mol.GetProp("ChEBI ID") if mol.HasProp("ChEBI ID") else ""
            smiles = Chem.MolToSmiles(mol)
            if not chebi_id or not smiles:
                continue

            fp = morgan_gen.GetFingerprint(mol)
            sim = DataStructs.TanimotoSimilarity(base_fp, fp)
            if sim >= similarity_threshold:
                writer.writerow({
                    "chebi_id": chebi_id,
                    "smiles": smiles,
                    "similarity": sim
                })
                count += 1
            if i % 10000 == 0 and i > 0:
                print(f"Processed {i} molecules, found {count} matches...")

        except Exception as e:
            continue

print(f"Done! Found and wrote {count} compounds with similarity >= {similarity_threshold} to {output_csv}.")

# 1. Load your similar structures and visualize them (optional)
df = pd.read_csv('/home/aldo/sims/chebi_sim_Luteina.csv')
mols = [Chem.MolFromSmiles(smi) for smi in df['smiles']]
legends = [f"Sim: {sim:.2f}" for sim in df['similarity']]
img = Draw.MolsToGridImage(mols, legends=legends, useSVG=True)
display(SVG(img.data))

# 2. Prepare molecules for MCS calculation
#    (If you want to use a different CSV, set output_csv = 'your_file.csv')
output_csv = '/home/aldo/sims/chebi_sim_Luteina.csv'
df = pd.read_csv(output_csv)
smiles_list = df['smiles'].tolist()
mols = [Chem.MolFromSmiles(smi) for smi in smiles_list if Chem.MolFromSmiles(smi) is not None]

# 3. Calculate the Maximum Common Substructure (MCS)
mcs_result = rdFMCS.FindMCS(mols)
print("MCS SMARTS:", mcs_result.smartsString)
print("Number of atoms in MCS:", mcs_result.numAtoms)
print("Number of bonds in MCS:", mcs_result.numBonds)

# 4. Convert SMARTS to molecule, visualize as SVG
mcs_mol = Chem.MolFromSmarts(mcs_result.smartsString)
svg = Draw.MolToSVG(mcs_mol, 400, 300)
display(SVG(svg))
